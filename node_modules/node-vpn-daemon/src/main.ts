import * as util from 'util'
import * as child_process from 'child_process'

const exec = util.promisify(child_process.exec)
const waitMS = util.promisify(setTimeout)
const plat: string = process.platform

class Daemon {
  private port: number
  private host: string
  private ovpnFile: string
  private wait: number
  private up: string
  private down: string
  private sudoPasswd: string

  /**
   * @constructs Daemon
   * @param sudoPasswd sudo password to start openvpn with
   * @param ovpnFile array with absolute or relative path to .ovpn files
   * @param host host for the manager to connect
   * @param port port for the manager to connect
   * @param wait miliseconds to wait after each command line action
   * @param up miliseconds to wait after each command line action
   * @param down miliseconds to wait after each command line action
   */

  constructor({
    sudoPasswd,
    ovpnFile = 'test.ovpn',
    port = 1337,
    host = '127.0.0.1',
    wait = 5000,
    up = '',
    down = ''
  }: {
    sudoPasswd?: string
    ovpnFile?: string
    port?: number
    host?: string
    wait?: number
    up?: string
    down?: string
  }) {
    this.sudoPasswd = sudoPasswd
    this.ovpnFile = ovpnFile
    this.port = port
    this.host = host
    this.wait = wait
    this.up = up
    this.down = down
  }

  /**
   * Parse all running processes to check if
   * a single one is running
   */
  private checkProcessList = async (cmd: string) => {
    const shellCmd =
      plat == 'win32'
        ? 'tasklist'
        : plat === 'linux'
        ? 'ps -A'
        : plat === 'darwin'
        ? 'px -ax | grep ' + cmd
        : ''
    if (cmd === '') {
      return false
    }
    const res = await exec(shellCmd)
    if (res.stdout) {
      return res.stdout.toLowerCase().indexOf(cmd.toLowerCase()) !== -1
    }
    return false
  }

  /**
   * Start the OpenVpn process and enable manager to connect to it
   */
  public start = async () => {
    let command: string = ''
    if (plat === 'win32') {
      command = `start cmd @cmd /k openvpn --management ${this.host} ${this.port} --config "${this.ovpnFile}" --script-security 2 --management-query-passwords --management-hold --register-dns `
    } else if (plat === 'darwin') {
      command = `${
        this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''
      } sudo -S openvpn --management ${this.host} ${this.port} --config "${
        this.ovpnFile
      }" --script-security 2 --management-query-passwords --management-hold --daemon`
    } else if (plat === 'linux') {
      command = `${
        this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''
      } sudo -S openvpn --management ${this.host} ${this.port} --config "${
        this.ovpnFile
      }" --script-security 2 --management-query-passwords --management-hold --daemon --dev tun0`
    }

    if (plat === 'darwin' || plat === 'linux') {
      if (this.up !== '') {
        command = command + ' --up ' + this.up
      }
      if (this.down !== '') {
        command = command + ' --down ' + this.down
      }
    }
    if (command === '') {
      throw new Error('Error starting VPN Daemon - no command found')
    } else {
      const runner = await exec(command)
      if (runner) {
        return waitMS(this.wait)
      }
      throw new Error('Error starting VPN Daemon')
    }
  }

  /**
   * Checks if openvpn is running on the system
   */
  public isRunning = () => {
    return this.checkProcessList(plat === 'win32' ? 'openvpn.exe' : 'openvpn')
  }

  /**
   * Kills the openvpn process
   */
  public kill = async () => {
    try {
      if (plat === 'win32') {
        await exec('Taskkill /IM openvpn.exe /F')
      } else {
        await exec(
          `${
            this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''
          } sudo -S killall openvpn`
        )
      }
      return waitMS(this.wait)
    } catch (err) {
      console.log('Error killing OpenVpn process - ' + err)
    }
  }
}

export default Daemon
