"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util = require("util");
const child_process = require("child_process");
const exec = util.promisify(child_process.exec);
const waitMS = util.promisify(setTimeout);
const plat = process.platform;
class Daemon {
    constructor({ sudoPasswd, ovpnFile = 'test.ovpn', port = 1337, host = '127.0.0.1', wait = 5000, up = '', down = '' }) {
        this.checkProcessList = (cmd) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const shellCmd = plat == 'win32'
                ? 'tasklist'
                : plat === 'linux'
                    ? 'ps -A'
                    : plat === 'darwin'
                        ? 'px -ax | grep ' + cmd
                        : '';
            if (cmd === '') {
                return false;
            }
            const res = yield exec(shellCmd);
            if (res.stdout) {
                return res.stdout.toLowerCase().indexOf(cmd.toLowerCase()) !== -1;
            }
            return false;
        });
        this.start = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            let command = '';
            if (plat === 'win32') {
                command = `start cmd @cmd /k openvpn --management ${this.host} ${this.port} --config "${this.ovpnFile}" --script-security 2 --management-query-passwords --management-hold --register-dns `;
            }
            else if (plat === 'darwin') {
                command = `${this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''} sudo -S openvpn --management ${this.host} ${this.port} --config "${this.ovpnFile}" --script-security 2 --management-query-passwords --management-hold --daemon`;
            }
            else if (plat === 'linux') {
                command = `${this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''} sudo -S openvpn --management ${this.host} ${this.port} --config "${this.ovpnFile}" --script-security 2 --management-query-passwords --management-hold --daemon --dev tun0`;
            }
            if (plat === 'darwin' || plat === 'linux') {
                if (this.up !== '') {
                    command = command + ' --up ' + this.up;
                }
                if (this.down !== '') {
                    command = command + ' --down ' + this.down;
                }
            }
            if (command === '') {
                throw new Error('Error starting VPN Daemon - no command found');
            }
            else {
                const runner = yield exec(command);
                if (runner) {
                    return waitMS(this.wait);
                }
                throw new Error('Error starting VPN Daemon');
            }
        });
        this.isRunning = () => {
            return this.checkProcessList(plat === 'win32' ? 'openvpn.exe' : 'openvpn');
        };
        this.kill = () => tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (plat === 'win32') {
                    yield exec('Taskkill /IM openvpn.exe /F');
                }
                else {
                    yield exec(`${this.sudoPasswd.length > 0 ? `echo ${this.sudoPasswd} |` : ''} sudo -S killall openvpn`);
                }
                return waitMS(this.wait);
            }
            catch (err) {
                console.log('Error killing OpenVpn process - ' + err);
            }
        });
        this.sudoPasswd = sudoPasswd;
        this.ovpnFile = ovpnFile;
        this.port = port;
        this.host = host;
        this.wait = wait;
        this.up = up;
        this.down = down;
    }
}
exports.default = Daemon;
//# sourceMappingURL=main.js.map